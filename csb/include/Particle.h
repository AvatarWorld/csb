#ifndef CSBPOINT_H
#define CSBPOINT_H

#include "vec3.hpp"

namespace csb
{

struct Particle
{
  //-----------------------------------------------------------------------------------------------------
  /// @brief Default constructor.
  //-----------------------------------------------------------------------------------------------------
  Particle() = default;
  //-----------------------------------------------------------------------------------------------------
  /// @brief Default copy constructor.
  //-----------------------------------------------------------------------------------------------------
  Particle(const Particle&) = default;
  //-----------------------------------------------------------------------------------------------------
  /// @brief Default copy assignment operator.
  //-----------------------------------------------------------------------------------------------------
  Particle& operator=(const Particle&) = default;
  //-----------------------------------------------------------------------------------------------------
  /// @brief Default move constructor.
  //-----------------------------------------------------------------------------------------------------
  Particle(Particle&&) = default;
  //-----------------------------------------------------------------------------------------------------
  /// @brief Default move assignment operator.
  //-----------------------------------------------------------------------------------------------------
  Particle& operator=(Particle&&) = default;
  //-----------------------------------------------------------------------------------------------------
  /// @brief Default destructor.
  //-----------------------------------------------------------------------------------------------------
  ~Particle() = default;
  //-----------------------------------------------------------------------------------------------------
  /// @brief Constructor.
  /// @param _pos is a reference to the position of a vertex, that this particle will manipulate.
  /// @param _invMass is the inverse mass of the particle which is used by constraints.
  //-----------------------------------------------------------------------------------------------------
  Particle(glm::vec3 &_pos, const float &_invMass) :
      m_pos(&_pos),
      m_prevPos(_pos),
      m_invMass(_invMass)
  {}

  //-----------------------------------------------------------------------------------------------------
  /// @brief A pointer to a vertex position, used by the particle to move that vertex.
  //-----------------------------------------------------------------------------------------------------
  glm::vec3* m_pos = nullptr;
  //-----------------------------------------------------------------------------------------------------
  /// @brief The previous position of the vertex, used for calculation of the next position.
  //-----------------------------------------------------------------------------------------------------
  glm::vec3 m_prevPos{0.f};
  //-----------------------------------------------------------------------------------------------------
  /// @brief The inverse mass of the particle which is used by constraints.
  //-----------------------------------------------------------------------------------------------------
  float m_invMass{0.f};
};

}

#endif // CSBPOINT_H
