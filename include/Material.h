#ifndef MATERIAL_H
#define MATERIAL_H

#include <array>
#include <mat4x4.hpp>

class ShaderLib;

class Material
{
public:
  //-----------------------------------------------------------------------------------------------------
  /// @brief Default constructor.
  //-----------------------------------------------------------------------------------------------------
  Material() = default;
  //-----------------------------------------------------------------------------------------------------
  /// @brief Default copy constructor.
  //-----------------------------------------------------------------------------------------------------
  Material(const Material&) = default;
  //-----------------------------------------------------------------------------------------------------
  /// @brief Default copy assignment operator.
  //-----------------------------------------------------------------------------------------------------
  Material& operator=(const Material&) = default;
  //-----------------------------------------------------------------------------------------------------
  /// @brief Default move constructor.
  //-----------------------------------------------------------------------------------------------------
  Material(Material&&) = default;
  //-----------------------------------------------------------------------------------------------------
  /// @brief Default move assignment operator.
  //-----------------------------------------------------------------------------------------------------
  Material& operator=(Material&&) = default;
  //-----------------------------------------------------------------------------------------------------
  /// @brief Default virtual destructor.
  //-----------------------------------------------------------------------------------------------------
  virtual ~Material() = default;
  //-----------------------------------------------------------------------------------------------------
  /// @brief Used to intialise a passed shader, subclasses must call this base function.
  //-----------------------------------------------------------------------------------------------------
  virtual void init(ShaderLib* io_shaderLib, const size_t _index, std::array<glm::mat4, 3>* io_matrices);
  //-----------------------------------------------------------------------------------------------------
  /// @brief Used to update shader values.
  //-----------------------------------------------------------------------------------------------------
  virtual void update() = 0;

  void apply();

  virtual const char* vertexName() const = 0;

  virtual const char* fragName() const = 0;

protected:
  //-----------------------------------------------------------------------------------------------------
  /// @brief A pointer to the shader program that this material affects.
  //-----------------------------------------------------------------------------------------------------
  ShaderLib* m_shaderLib = nullptr;

  size_t m_shaderIndex = 0;
  //-----------------------------------------------------------------------------------------------------
  /// @brief A pointer to matrices this material should use for the vertex shader.
  //-----------------------------------------------------------------------------------------------------
  std::array<glm::mat4, 3>* m_matrices = nullptr;
};

#endif // MATERIAL_H
